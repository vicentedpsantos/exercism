{
  "_args": [
    [
      {
        "raw": "bser@2.1.1",
        "scope": null,
        "escapedName": "bser",
        "name": "bser",
        "rawSpec": "2.1.1",
        "spec": "2.1.1",
        "type": "version"
      },
      "/home/vicentesantos/exercism/javascript/collatz-conjecture/node_modules/fb-watchman"
    ]
  ],
  "_from": "bser@2.1.1",
  "_hasShrinkwrap": false,
  "_id": "bser@2.1.1",
  "_location": "/bser",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/bser_2.1.1_1571761214821_0.21502650063663964"
  },
  "_npmUser": {
    "name": "wez",
    "email": "wez@wezfurlong.org"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "bser@2.1.1",
    "scope": null,
    "escapedName": "bser",
    "name": "bser",
    "rawSpec": "2.1.1",
    "spec": "2.1.1",
    "type": "version"
  },
  "_requiredBy": [
    "/fb-watchman"
  ],
  "_resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
  "_shasum": "e6787da20ece9d07998533cfd9de6f5c38f4bc05",
  "_shrinkwrap": null,
  "_spec": "bser@2.1.1",
  "_where": "/home/vicentesantos/exercism/javascript/collatz-conjecture/node_modules/fb-watchman",
  "author": {
    "name": "Wez Furlong",
    "email": "wez@fb.com",
    "url": "http://wezfurlong.org"
  },
  "bugs": {
    "url": "https://github.com/facebook/watchman/issues"
  },
  "dependencies": {
    "node-int64": "^0.4.0"
  },
  "description": "JavaScript implementation of the BSER Binary Serialization",
  "devDependencies": {},
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "e6787da20ece9d07998533cfd9de6f5c38f4bc05",
    "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
    "tarball": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
    "fileCount": 4,
    "unpackedSize": 17986,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdryw/CRA9TVsSAnZWagAATkwP/RREEY8DFYdeeOckCeKx\nmtL1wHI2GyGSo9Cf7EkM7FINX3F2XjCFR6RikQ2aL1b3isuVLyaNsqxSePci\ngZgBp9zjKoC38v8SROFDVhxumOqsey+0GPLie67BdACCOIJaZkVxDNzk3xB5\nJp9PRhfnB0eUHI8ZZtupqnrsv9w5FAiW72ZlAo4i6jt1XY6iB6kuLFVPHBWs\nVctbxuiamP1A/ouQ8lecdXZMxuQLUi4jkCNML29X3uT/soswzIsd24W2jqTU\n2bl9mzNNGs/6+C8NsyPLYz9M0lNqfR071bLhoIjkwFMan62IZG3rRVHry+3J\nihCZU+8ZclTZRAPfHyedgYxges/YLr8JJODHfH/0UkFJvl/oEmaZ9+wqDUoB\n1rrqzF5YjA4oXUKv8kR0nvTuhqUuHqkDLmlfbmQMaRitArWiKH87FeSSnbPf\nnaOqWRds+DJXf6sCmaiKaS8+noCtipMp+lo2VyLzrhhpgNT3hUHADjJXfh2s\nJdva8DHJUfX9vhHMGaolrZmjJNKvWJa5pWUVQD9KiySdct6TcjAoGyEfoAJt\n5DuAw7jJxCBNoWoMEvL2n5uuVHx1eph8qHdhhs+nC1ldqr/eZZq3QmJpnVh5\ngOnX2z3wAPH6rtC5P3P8YW2kqLgkCDnv3slc+IJ2GeV2EwakrEAdRx2RCUL/\nQLgc\r\n=i+OA\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://facebook.github.io/watchman/docs/bser.html",
  "keywords": [
    "bser",
    "binary",
    "protocol"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "amasad",
      "email": "amjad.masad@gmail.com"
    },
    {
      "name": "kassens",
      "email": "jkassens@fb.com"
    },
    {
      "name": "wez",
      "email": "wez@wezfurlong.org"
    }
  ],
  "name": "bser",
  "optionalDependencies": {},
  "readme": "# BSER Binary Serialization\n\nBSER is a binary serialization scheme that can be used as an alternative to JSON.\nBSER uses a framed encoding that makes it simpler to use to stream a sequence of\nencoded values.\n\nIt is intended to be used for local-IPC only and strings are represented as binary\nwith no specific encoding; this matches the convention employed by most operating\nsystem filename storage.\n\nFor more details about the serialization scheme see\n[Watchman's docs](https://facebook.github.io/watchman/docs/bser.html).\n\n## API\n\n```js\nvar bser = require('bser');\n```\n\n### bser.loadFromBuffer\n\nThe is the synchronous decoder; given an input string or buffer,\ndecodes a single value and returns it.  Throws an error if the\ninput is invalid.\n\n```js\nvar obj = bser.loadFromBuffer(buf);\n```\n\n### bser.dumpToBuffer\n\nSynchronously encodes a value as BSER.\n\n```js\nvar encoded = bser.dumpToBuffer(['hello']);\nconsole.log(bser.loadFromBuffer(encoded)); // ['hello']\n```\n\n### BunserBuf\n\nThe asynchronous decoder API is implemented in the BunserBuf object.\nYou may incrementally append data to this object and it will emit the\ndecoded values via its `value` event.\n\n```js\nvar bunser = new bser.BunserBuf();\n\nbunser.on('value', function(obj) {\n  console.log(obj);\n});\n```\n\nThen in your socket `data` event:\n\n```js\nbunser.append(buf);\n```\n\n## Example\n\nRead BSER from socket:\n\n```js\nvar bunser = new bser.BunserBuf();\n\nbunser.on('value', function(obj) {\n  console.log('data from socket', obj);\n});\n\nvar socket = net.connect('/socket');\n\nsocket.on('data', function(buf) {\n  bunser.append(buf);\n});\n```\n\nWrite BSER to socket:\n\n```js\nsocket.write(bser.dumpToBuffer(obj));\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/facebook/watchman.git"
  },
  "scripts": {
    "test": "node test/bser.js"
  },
  "version": "2.1.1"
}
