{
  "_args": [
    [
      {
        "raw": "ws@^7.0.0",
        "scope": null,
        "escapedName": "ws",
        "name": "ws",
        "rawSpec": "^7.0.0",
        "spec": ">=7.0.0 <8.0.0",
        "type": "range"
      },
      "/home/vicentesantos/exercism/javascript/collatz-conjecture/node_modules/jsdom"
    ]
  ],
  "_from": "ws@^7.0.0",
  "_hasShrinkwrap": false,
  "_id": "ws@7.2.5",
  "_location": "/ws",
  "_nodeVersion": "14.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ws_7.2.5_1587811977237_0.15290584517613803"
  },
  "_npmUser": {
    "name": "lpinca",
    "email": "luigipinca@gmail.com"
  },
  "_npmVersion": "6.14.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ws@^7.0.0",
    "scope": null,
    "escapedName": "ws",
    "name": "ws",
    "rawSpec": "^7.0.0",
    "spec": ">=7.0.0 <8.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jsdom"
  ],
  "_resolved": "https://registry.npmjs.org/ws/-/ws-7.2.5.tgz",
  "_shasum": "abb1370d4626a5a9cd79d8de404aa18b3465d10d",
  "_shrinkwrap": null,
  "_spec": "ws@^7.0.0",
  "_where": "/home/vicentesantos/exercism/javascript/collatz-conjecture/node_modules/jsdom",
  "author": {
    "name": "Einar Otto Stangvik",
    "email": "einaros@gmail.com",
    "url": "http://2x.io"
  },
  "browser": "browser.js",
  "bugs": {
    "url": "https://github.com/websockets/ws/issues"
  },
  "dependencies": {},
  "description": "Simple to use, blazing fast and thoroughly tested websocket client and server for Node.js",
  "devDependencies": {
    "benchmark": "^2.1.4",
    "bufferutil": "^4.0.1",
    "eslint": "^6.0.0",
    "eslint-config-prettier": "^6.0.0",
    "eslint-plugin-prettier": "^3.0.1",
    "mocha": "^7.0.0",
    "nyc": "^15.0.0",
    "prettier": "^1.17.0",
    "utf-8-validate": "^5.0.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-C34cIU4+DB2vMyAbmEKossWq2ZQDr6QEyuuCzWrM9zfw1sGc0mYiJ0UnG9zzNykt49C2Fi34hvr2vssFQRS6EA==",
    "shasum": "abb1370d4626a5a9cd79d8de404aa18b3465d10d",
    "tarball": "https://registry.npmjs.org/ws/-/ws-7.2.5.tgz",
    "fileCount": 17,
    "unpackedSize": 109520,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJepBaJCRA9TVsSAnZWagAArqAQAKUTurNgpRC/zpN3XTPA\nQZhkGYq05pr/ztJ8dJpT+G7dx8hgh3sPMPyiQ1JPp/EoJ9xHMj4RBin43iQp\nqxQyWbSZHYgF9fB2wF5kFkWcxfFs46KGi/rfv2/uBRzaYRQbjXSXyexS1ZHI\nTUp2ZodbreXOrvkUOFPxlEAG/Mj1BLpvxpStsnj1DQi00q0vJ6sgiMwKZVND\nsucRMU82gc8j3Fk9GzKEETG+Vf2QotccE0XMAciodpTH7eKbP9W3mUzx2xlZ\nwrmrHtr32NfPE0IbHY6ARamolSJkGThLTeA/vFgbEwM1eLmOazgu23ib4wcl\nLRcJoJWguKqfZvxTwm1wCRioBLsWb++D1KaD68aMg+wxkPlIf8glsSmZ1vXf\nKe3Ru6w0fSflhz68gZXE9Csyo53HzkvrMQTrZ6HAkoMccwVV2v/OnLjvBEdf\nGwPbmXKfbqhI5gPyz4cSP7h1zSW/oVkhr33nn09Er0i+BRwHoQ/8NB8buHNb\nA0QLvgOwyCN05FNiOaSeB1lskTxNM5NhCV4ukTXixtd9epzIiqwIEp41NgCJ\nleMmqbEstxc8l4igGZcClaEq5ReKtwWH+coTB5pK2rcQ+l2XYiS1ddBZM+Ha\nJFIkofhETLQ30boJdu3GNex0dbR2FNf526MuvEkaQLyf7WVrstLXsYd6nbju\nTRda\r\n=ev6E\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=8.3.0"
  },
  "files": [
    "browser.js",
    "index.js",
    "lib/*.js"
  ],
  "gitHead": "67983cbba428d3b55c6f97d4cf17d29e32a113d0",
  "greenkeeper": {
    "commitMessages": {
      "dependencyUpdate": "[pkg] Update ${dependency} to version ${version}",
      "devDependencyUpdate": "[pkg] Update ${dependency} to version ${version}"
    }
  },
  "homepage": "https://github.com/websockets/ws",
  "keywords": [
    "HyBi",
    "Push",
    "RFC-6455",
    "WebSocket",
    "WebSockets",
    "real-time"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "3rdeden",
      "email": "npm@3rd-Eden.com"
    },
    {
      "name": "einaros",
      "email": "einaros@gmail.com"
    },
    {
      "name": "lpinca",
      "email": "luigipinca@gmail.com"
    },
    {
      "name": "v1",
      "email": "npm@3rd-Eden.com"
    }
  ],
  "name": "ws",
  "optionalDependencies": {},
  "peerDependencies": {
    "bufferutil": "^4.0.1",
    "utf-8-validate": "^5.0.2"
  },
  "peerDependenciesMeta": {
    "bufferutil": {
      "optional": true
    },
    "utf-8-validate": {
      "optional": true
    }
  },
  "readme": "# ws: a Node.js WebSocket library\n\n[![Version npm](https://img.shields.io/npm/v/ws.svg?logo=npm)](https://www.npmjs.com/package/ws)\n[![Build](https://github.com/websockets/ws/workflows/.github/workflows/build/badge.svg)](https://github.com/websockets/ws/actions?workflow=build)\n[![Windows x86 Build](https://img.shields.io/appveyor/ci/lpinca/ws/master.svg?logo=appveyor)](https://ci.appveyor.com/project/lpinca/ws)\n[![Coverage Status](https://img.shields.io/coveralls/websockets/ws/master.svg)](https://coveralls.io/github/websockets/ws)\n\nws is a simple to use, blazing fast, and thoroughly tested WebSocket client and\nserver implementation.\n\nPasses the quite extensive Autobahn test suite: [server][server-report],\n[client][client-report].\n\n**Note**: This module does not work in the browser. The client in the docs is a\nreference to a back end with the role of a client in the WebSocket\ncommunication. Browser clients must use the native\n[`WebSocket`](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket)\nobject. To make the same code work seamlessly on Node.js and the browser, you\ncan use one of the many wrappers available on npm, like\n[isomorphic-ws](https://github.com/heineiuo/isomorphic-ws).\n\n## Table of Contents\n\n- [Protocol support](#protocol-support)\n- [Installing](#installing)\n  - [Opt-in for performance and spec compliance](#opt-in-for-performance-and-spec-compliance)\n- [API docs](#api-docs)\n- [WebSocket compression](#websocket-compression)\n- [Usage examples](#usage-examples)\n  - [Sending and receiving text data](#sending-and-receiving-text-data)\n  - [Sending binary data](#sending-binary-data)\n  - [Simple server](#simple-server)\n  - [External HTTP/S server](#external-https-server)\n  - [Multiple servers sharing a single HTTP/S server](#multiple-servers-sharing-a-single-https-server)\n  - [Client authentication](#client-authentication)\n  - [Server broadcast](#server-broadcast)\n  - [echo.websocket.org demo](#echowebsocketorg-demo)\n  - [Use the Node.js streams API](#use-the-nodejs-streams-api)\n  - [Other examples](#other-examples)\n- [FAQ](#faq)\n  - [How to get the IP address of the client?](#how-to-get-the-ip-address-of-the-client)\n  - [How to detect and close broken connections?](#how-to-detect-and-close-broken-connections)\n  - [How to connect via a proxy?](#how-to-connect-via-a-proxy)\n- [Changelog](#changelog)\n- [License](#license)\n\n## Protocol support\n\n- **HyBi drafts 07-12** (Use the option `protocolVersion: 8`)\n- **HyBi drafts 13-17** (Current default, alternatively option\n  `protocolVersion: 13`)\n\n## Installing\n\n```\nnpm install ws\n```\n\n### Opt-in for performance and spec compliance\n\nThere are 2 optional modules that can be installed along side with the ws\nmodule. These modules are binary addons which improve certain operations.\nPrebuilt binaries are available for the most popular platforms so you don't\nnecessarily need to have a C++ compiler installed on your machine.\n\n- `npm install --save-optional bufferutil`: Allows to efficiently perform\n  operations such as masking and unmasking the data payload of the WebSocket\n  frames.\n- `npm install --save-optional utf-8-validate`: Allows to efficiently check if a\n  message contains valid UTF-8 as required by the spec.\n\n## API docs\n\nSee [`/doc/ws.md`](./doc/ws.md) for Node.js-like documentation of ws classes and\nutility functions.\n\n## WebSocket compression\n\nws supports the [permessage-deflate extension][permessage-deflate] which enables\nthe client and server to negotiate a compression algorithm and its parameters,\nand then selectively apply it to the data payloads of each WebSocket message.\n\nThe extension is disabled by default on the server and enabled by default on the\nclient. It adds a significant overhead in terms of performance and memory\nconsumption so we suggest to enable it only if it is really needed.\n\nNote that Node.js has a variety of issues with high-performance compression,\nwhere increased concurrency, especially on Linux, can lead to [catastrophic\nmemory fragmentation][node-zlib-bug] and slow performance. If you intend to use\npermessage-deflate in production, it is worthwhile to set up a test\nrepresentative of your workload and ensure Node.js/zlib will handle it with\nacceptable performance and memory usage.\n\nTuning of permessage-deflate can be done via the options defined below. You can\nalso use `zlibDeflateOptions` and `zlibInflateOptions`, which is passed directly\ninto the creation of [raw deflate/inflate streams][node-zlib-deflaterawdocs].\n\nSee [the docs][ws-server-options] for more options.\n\n```js\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({\n  port: 8080,\n  perMessageDeflate: {\n    zlibDeflateOptions: {\n      // See zlib defaults.\n      chunkSize: 1024,\n      memLevel: 7,\n      level: 3\n    },\n    zlibInflateOptions: {\n      chunkSize: 10 * 1024\n    },\n    // Other options settable:\n    clientNoContextTakeover: true, // Defaults to negotiated value.\n    serverNoContextTakeover: true, // Defaults to negotiated value.\n    serverMaxWindowBits: 10, // Defaults to negotiated value.\n    // Below options specified as default values.\n    concurrencyLimit: 10, // Limits zlib concurrency for perf.\n    threshold: 1024 // Size (in bytes) below which messages\n    // should not be compressed.\n  }\n});\n```\n\nThe client will only use the extension if it is supported and enabled on the\nserver. To always disable the extension on the client set the\n`perMessageDeflate` option to `false`.\n\n```js\nconst WebSocket = require('ws');\n\nconst ws = new WebSocket('ws://www.host.com/path', {\n  perMessageDeflate: false\n});\n```\n\n## Usage examples\n\n### Sending and receiving text data\n\n```js\nconst WebSocket = require('ws');\n\nconst ws = new WebSocket('ws://www.host.com/path');\n\nws.on('open', function open() {\n  ws.send('something');\n});\n\nws.on('message', function incoming(data) {\n  console.log(data);\n});\n```\n\n### Sending binary data\n\n```js\nconst WebSocket = require('ws');\n\nconst ws = new WebSocket('ws://www.host.com/path');\n\nws.on('open', function open() {\n  const array = new Float32Array(5);\n\n  for (var i = 0; i < array.length; ++i) {\n    array[i] = i / 2;\n  }\n\n  ws.send(array);\n});\n```\n\n### Simple server\n\n```js\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', function connection(ws) {\n  ws.on('message', function incoming(message) {\n    console.log('received: %s', message);\n  });\n\n  ws.send('something');\n});\n```\n\n### External HTTP/S server\n\n```js\nconst fs = require('fs');\nconst https = require('https');\nconst WebSocket = require('ws');\n\nconst server = https.createServer({\n  cert: fs.readFileSync('/path/to/cert.pem'),\n  key: fs.readFileSync('/path/to/key.pem')\n});\nconst wss = new WebSocket.Server({ server });\n\nwss.on('connection', function connection(ws) {\n  ws.on('message', function incoming(message) {\n    console.log('received: %s', message);\n  });\n\n  ws.send('something');\n});\n\nserver.listen(8080);\n```\n\n### Multiple servers sharing a single HTTP/S server\n\n```js\nconst http = require('http');\nconst WebSocket = require('ws');\nconst url = require('url');\n\nconst server = http.createServer();\nconst wss1 = new WebSocket.Server({ noServer: true });\nconst wss2 = new WebSocket.Server({ noServer: true });\n\nwss1.on('connection', function connection(ws) {\n  // ...\n});\n\nwss2.on('connection', function connection(ws) {\n  // ...\n});\n\nserver.on('upgrade', function upgrade(request, socket, head) {\n  const pathname = url.parse(request.url).pathname;\n\n  if (pathname === '/foo') {\n    wss1.handleUpgrade(request, socket, head, function done(ws) {\n      wss1.emit('connection', ws, request);\n    });\n  } else if (pathname === '/bar') {\n    wss2.handleUpgrade(request, socket, head, function done(ws) {\n      wss2.emit('connection', ws, request);\n    });\n  } else {\n    socket.destroy();\n  }\n});\n\nserver.listen(8080);\n```\n\n### Client authentication\n\n```js\nconst http = require('http');\nconst WebSocket = require('ws');\n\nconst server = http.createServer();\nconst wss = new WebSocket.Server({ noServer: true });\n\nwss.on('connection', function connection(ws, request, client) {\n  ws.on('message', function message(msg) {\n    console.log(`Received message ${msg} from user ${client}`);\n  });\n});\n\nserver.on('upgrade', function upgrade(request, socket, head) {\n  // This function is not defined on purpose. Implement it with your own logic.\n  authenticate(request, (err, client) => {\n    if (err || !client) {\n      socket.write('HTTP/1.1 401 Unauthorized\\r\\n\\r\\n');\n      socket.destroy();\n      return;\n    }\n\n    wss.handleUpgrade(request, socket, head, function done(ws) {\n      wss.emit('connection', ws, request, client);\n    });\n  });\n});\n\nserver.listen(8080);\n```\n\nAlso see the provided [example][session-parse-example] using `express-session`.\n\n### Server broadcast\n\nA client WebSocket broadcasting to all connected WebSocket clients, including\nitself.\n\n```js\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', function connection(ws) {\n  ws.on('message', function incoming(data) {\n    wss.clients.forEach(function each(client) {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(data);\n      }\n    });\n  });\n});\n```\n\nA client WebSocket broadcasting to every other connected WebSocket clients,\nexcluding itself.\n\n```js\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', function connection(ws) {\n  ws.on('message', function incoming(data) {\n    wss.clients.forEach(function each(client) {\n      if (client !== ws && client.readyState === WebSocket.OPEN) {\n        client.send(data);\n      }\n    });\n  });\n});\n```\n\n### echo.websocket.org demo\n\n```js\nconst WebSocket = require('ws');\n\nconst ws = new WebSocket('wss://echo.websocket.org/', {\n  origin: 'https://websocket.org'\n});\n\nws.on('open', function open() {\n  console.log('connected');\n  ws.send(Date.now());\n});\n\nws.on('close', function close() {\n  console.log('disconnected');\n});\n\nws.on('message', function incoming(data) {\n  console.log(`Roundtrip time: ${Date.now() - data} ms`);\n\n  setTimeout(function timeout() {\n    ws.send(Date.now());\n  }, 500);\n});\n```\n\n### Use the Node.js streams API\n\n```js\nconst WebSocket = require('ws');\n\nconst ws = new WebSocket('wss://echo.websocket.org/', {\n  origin: 'https://websocket.org'\n});\n\nconst duplex = WebSocket.createWebSocketStream(ws, { encoding: 'utf8' });\n\nduplex.pipe(process.stdout);\nprocess.stdin.pipe(duplex);\n```\n\n### Other examples\n\nFor a full example with a browser client communicating with a ws server, see the\nexamples folder.\n\nOtherwise, see the test cases.\n\n## FAQ\n\n### How to get the IP address of the client?\n\nThe remote IP address can be obtained from the raw socket.\n\n```js\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', function connection(ws, req) {\n  const ip = req.socket.remoteAddress;\n});\n```\n\nWhen the server runs behind a proxy like NGINX, the de-facto standard is to use\nthe `X-Forwarded-For` header.\n\n```js\nwss.on('connection', function connection(ws, req) {\n  const ip = req.headers['x-forwarded-for'].split(/\\s*,\\s*/)[0];\n});\n```\n\n### How to detect and close broken connections?\n\nSometimes the link between the server and the client can be interrupted in a way\nthat keeps both the server and the client unaware of the broken state of the\nconnection (e.g. when pulling the cord).\n\nIn these cases ping messages can be used as a means to verify that the remote\nendpoint is still responsive.\n\n```js\nconst WebSocket = require('ws');\n\nfunction noop() {}\n\nfunction heartbeat() {\n  this.isAlive = true;\n}\n\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', function connection(ws) {\n  ws.isAlive = true;\n  ws.on('pong', heartbeat);\n});\n\nconst interval = setInterval(function ping() {\n  wss.clients.forEach(function each(ws) {\n    if (ws.isAlive === false) return ws.terminate();\n\n    ws.isAlive = false;\n    ws.ping(noop);\n  });\n}, 30000);\n\nwss.on('close', function close() {\n  clearInterval(interval);\n});\n```\n\nPong messages are automatically sent in response to ping messages as required by\nthe spec.\n\nJust like the server example above your clients might as well lose connection\nwithout knowing it. You might want to add a ping listener on your clients to\nprevent that. A simple implementation would be:\n\n```js\nconst WebSocket = require('ws');\n\nfunction heartbeat() {\n  clearTimeout(this.pingTimeout);\n\n  // Use `WebSocket#terminate()`, which immediately destroys the connection,\n  // instead of `WebSocket#close()`, which waits for the close timer.\n  // Delay should be equal to the interval at which your server\n  // sends out pings plus a conservative assumption of the latency.\n  this.pingTimeout = setTimeout(() => {\n    this.terminate();\n  }, 30000 + 1000);\n}\n\nconst client = new WebSocket('wss://echo.websocket.org/');\n\nclient.on('open', heartbeat);\nclient.on('ping', heartbeat);\nclient.on('close', function clear() {\n  clearTimeout(this.pingTimeout);\n});\n```\n\n### How to connect via a proxy?\n\nUse a custom `http.Agent` implementation like [https-proxy-agent][] or\n[socks-proxy-agent][].\n\n## Changelog\n\nWe're using the GitHub [releases][changelog] for changelog entries.\n\n## License\n\n[MIT](LICENSE)\n\n[changelog]: https://github.com/websockets/ws/releases\n[client-report]: http://websockets.github.io/ws/autobahn/clients/\n[https-proxy-agent]: https://github.com/TooTallNate/node-https-proxy-agent\n[node-zlib-bug]: https://github.com/nodejs/node/issues/8871\n[node-zlib-deflaterawdocs]:\n  https://nodejs.org/api/zlib.html#zlib_zlib_createdeflateraw_options\n[permessage-deflate]: https://tools.ietf.org/html/rfc7692\n[server-report]: http://websockets.github.io/ws/autobahn/servers/\n[session-parse-example]: ./examples/express-session-parse\n[socks-proxy-agent]: https://github.com/TooTallNate/node-socks-proxy-agent\n[ws-server-options]:\n  https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketserveroptions-callback\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/websockets/ws.git"
  },
  "scripts": {
    "integration": "npm run lint && mocha --throw-deprecation test/*.integration.js",
    "lint": "eslint --ignore-path .gitignore . && prettier --check --ignore-path .gitignore \"**/*.{json,md,yaml,yml}\"",
    "test": "npm run lint && nyc --reporter=lcov --reporter=text mocha --throw-deprecation test/*.test.js"
  },
  "version": "7.2.5"
}
