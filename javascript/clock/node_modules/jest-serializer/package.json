{
  "_args": [
    [
      {
        "raw": "jest-serializer@^25.5.0",
        "scope": null,
        "escapedName": "jest-serializer",
        "name": "jest-serializer",
        "rawSpec": "^25.5.0",
        "spec": ">=25.5.0 <26.0.0",
        "type": "range"
      },
      "/home/vicentesantos/exercism/javascript/clock/node_modules/jest-haste-map"
    ]
  ],
  "_from": "jest-serializer@^25.5.0",
  "_hasShrinkwrap": false,
  "_id": "jest-serializer@25.5.0",
  "_location": "/jest-serializer",
  "_nodeVersion": "12.16.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/jest-serializer_25.5.0_1588103112413_0.6775678901365392"
  },
  "_npmUser": {
    "name": "simenb",
    "email": "sbekkhus91@gmail.com"
  },
  "_npmVersion": "lerna/3.20.2/node@v12.16.1+x64 (darwin)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jest-serializer@^25.5.0",
    "scope": null,
    "escapedName": "jest-serializer",
    "name": "jest-serializer",
    "rawSpec": "^25.5.0",
    "spec": ">=25.5.0 <26.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jest-haste-map"
  ],
  "_resolved": "https://registry.npmjs.org/jest-serializer/-/jest-serializer-25.5.0.tgz",
  "_shasum": "a993f484e769b4ed54e70e0efdb74007f503072b",
  "_shrinkwrap": null,
  "_spec": "jest-serializer@^25.5.0",
  "_where": "/home/vicentesantos/exercism/javascript/clock/node_modules/jest-haste-map",
  "bugs": {
    "url": "https://github.com/facebook/jest/issues"
  },
  "dependencies": {
    "graceful-fs": "^4.2.4"
  },
  "description": "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.",
  "devDependencies": {
    "@types/graceful-fs": "^4.1.3",
    "@types/node": "*"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-LxD8fY1lByomEPflwur9o4e2a5twSQ7TaVNLlFUuToIdoJuBt8tzHfCsZ42Ok6LkKXWzFWf3AGmheuLAA7LcCA==",
    "shasum": "a993f484e769b4ed54e70e0efdb74007f503072b",
    "tarball": "https://registry.npmjs.org/jest-serializer/-/jest-serializer-25.5.0.tgz",
    "fileCount": 7,
    "unpackedSize": 7686,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeqIfJCRA9TVsSAnZWagAAq1cP/iFYC8dEyisY0zeq3s9+\n3Gb92SOMj9b/vfIj8BM/WSZFegCVKzWzrY5tUpLS0Rx0S1Z+iWzquruiXLyc\n3rw/UTNc0aW3Y3fgZhU6sEcXdVJcEpr66mS+PFyid+SaT2xNr3gKVwlNLhbt\n/Qj0VylpVWzwZHlOgYX7v3M9GH25CYnECn8UklLkxRbEot9f98pFMnT9teE3\nIR/1bfpQ1bAMYUtZL3lcz6+XwGtPoosegVXTzz1oy6OK77MNGZ3P1cowYkzN\nb0DtkxnxpS9458BEPtw/MlNLI4DzpaKfJDRnqx5gJfM+ZjwXNFFGNzLlACvz\ngGHpp7Y3+cGWKfo6CLrMIqSsjAcjUJsWHA0mJPHT/i42fFq+CR12ZCbzq/Ag\n+BdFzHpIrMhSeVgEHOsFuG8+A/Cgg9y+DfFjd0uboBakDVSgzf+HlNubTT5P\nVjyP7Ws2cUQ7GQIRR4Xxztd1rcCZLRDOtCKYEZ5CDUSCi02O4LdZhiuyiqwH\n9jzfRSyhl/j4h7XxWor3daU289qF4erecK5OUh6VdW6EPUSCJuzOkmxHfZYm\n4MbljI1G7iTDprWMaVmuALXpwRkoU33u/AwEQAQVGl5WFYiPMcpuyUrwn+oX\nsXwlschrwtKQB7mVBvT9O49PTC31D186AP5FvZw3qMuyHTlpm2S19YX6LivW\nvnZn\r\n=b44B\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 8.3"
  },
  "gitHead": "ddd73d18adfb982b9b0d94bad7d41c9f78567ca7",
  "homepage": "https://github.com/facebook/jest#readme",
  "license": "MIT",
  "main": "build/index.js",
  "maintainers": [
    {
      "name": "cpojer",
      "email": "christoph.pojer@gmail.com"
    },
    {
      "name": "davidzilburg",
      "email": "davidzilburg@gmail.com"
    },
    {
      "name": "fb",
      "email": "opensource+npm@fb.com"
    },
    {
      "name": "rubennorte",
      "email": "rubennorte@gmail.com"
    },
    {
      "name": "scotthovestadt",
      "email": "scott.hovestadt@gmail.com"
    },
    {
      "name": "simenb",
      "email": "sbekkhus91@gmail.com"
    }
  ],
  "name": "jest-serializer",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {deserialize, serialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/facebook/jest.git",
    "directory": "packages/jest-serializer"
  },
  "types": "build/index.d.ts",
  "typesVersions": {
    "<3.8": {
      "build/*": [
        "build/ts3.4/*"
      ]
    }
  },
  "version": "25.5.0"
}
