{
  "_args": [
    [
      {
        "raw": "node-notifier@^6.0.0",
        "scope": null,
        "escapedName": "node-notifier",
        "name": "node-notifier",
        "rawSpec": "^6.0.0",
        "spec": ">=6.0.0 <7.0.0",
        "type": "range"
      },
      "/home/vicentesantos/exercism/javascript/clock/node_modules/@jest/reporters"
    ]
  ],
  "_from": "node-notifier@^6.0.0",
  "_hasShrinkwrap": false,
  "_id": "node-notifier@6.0.0",
  "_location": "/node-notifier",
  "_nodeVersion": "12.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/node-notifier_6.0.0_1569246372437_0.53744968520705"
  },
  "_npmUser": {
    "name": "mikaelb",
    "email": "mikaelbre@gmail.com"
  },
  "_npmVersion": "6.11.3",
  "_phantomChildren": {
    "isexe": "2.0.0"
  },
  "_requested": {
    "raw": "node-notifier@^6.0.0",
    "scope": null,
    "escapedName": "node-notifier",
    "name": "node-notifier",
    "rawSpec": "^6.0.0",
    "spec": ">=6.0.0 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@jest/reporters"
  ],
  "_resolved": "https://registry.npmjs.org/node-notifier/-/node-notifier-6.0.0.tgz",
  "_shasum": "cea319e06baa16deec8ce5cd7f133c4a46b68e12",
  "_shrinkwrap": null,
  "_spec": "node-notifier@^6.0.0",
  "_where": "/home/vicentesantos/exercism/javascript/clock/node_modules/@jest/reporters",
  "author": {
    "name": "Mikael Brevik"
  },
  "bugs": {
    "url": "https://github.com/mikaelbr/node-notifier/issues"
  },
  "dependencies": {
    "growly": "^1.3.0",
    "is-wsl": "^2.1.1",
    "semver": "^6.3.0",
    "shellwords": "^0.1.1",
    "which": "^1.3.1"
  },
  "description": "A Node.js module for sending notifications on native Mac, Windows (post and pre 8) and Linux (or Growl as fallback)",
  "devDependencies": {
    "eslint": "^6.4.0",
    "eslint-config-semistandard": "^15.0.0",
    "eslint-config-standard": "^14.1.0",
    "eslint-plugin-import": "^2.18.2",
    "eslint-plugin-node": "^10.0.0",
    "eslint-plugin-promise": "^4.2.1",
    "eslint-plugin-standard": "^4.0.1",
    "husky": "^3.0.5",
    "jest": "^24.9.0",
    "lint-staged": "^9.3.0",
    "prettier": "^1.18.2"
  },
  "directories": {
    "example": "example",
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-SVfQ/wMw+DesunOm5cKqr6yDcvUTDl/yc97ybGHMrteNEY6oekXpNpS3lZwgLlwz0FLgHoiW28ZpmBHUDg37cw==",
    "shasum": "cea319e06baa16deec8ce5cd7f133c4a46b68e12",
    "tarball": "https://registry.npmjs.org/node-notifier/-/node-notifier-6.0.0.tgz",
    "fileCount": 26,
    "unpackedSize": 5643748,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdiMylCRA9TVsSAnZWagAAskYQAJAcJhB2fxrgVOJ3uJYf\nzQuT7fd2Fvy+7Opdvmkr2uDCkf9uufqAb87Bt9x/VNEIRIUz3WiHLVMNv35c\nRxQOoxWOAeWP2ApCNeGcceWnZKzNbHtqPDksY2vVMD9Fa8jm69C+AvA+en9T\nCyZNU1CrQk1AXa+aEJpJ6KckD0uiytrUR3BvG5n4CZbo8hkV3tZUwjetJwjj\nkWnrJpZyfmuGtSbnozOWxuF61Pqijs72lNLBgtqFJtne/cUf5JPPt8RNFgk7\nRmFW8tp+gMkfXQBKRLbazUcfCWhxxjfd9OKVRKUa+AVKOzFY9eMyJUGNxgjR\nyub8daGINXW8R5DWBHeDo4VuhxFlJn8yPDzgZ35cCprGA+fJYdxuaMtk3bxV\nhxzjOZs/VPK8/rT0uH1Y7ykFwYaCNz7KL42fwPRWwbVc9jODRv7PhTx70XBV\n4LDTdbke8ZUUQyjiNA8/VO94BSOkHtqjZNDsZfSZ85VWALw1gukFx8ZwhLq3\n90HHx0h2X3tkgUIl+rUzUWWLCV33Ve3LldOHLbwhofh4iu70eF9NMC4MHOUv\nlTByYYAeBIPWAIhmMh9oi8Vw+5Qh/eM4PYiC2GHaeKMZY96aaPVw8IuU3wbF\nyfnoQLu4xaxzhK3OP4S6yTQmjv1RJuf3Y6R5V+pYhopRy7bBLCGF8FrhKNlD\nbZpn\r\n=y2o+\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "20ae1a8b5b34c0e87cbfa1bd3262b56ea419e2c8",
  "homepage": "https://github.com/mikaelbr/node-notifier#readme",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "jest": {
    "testRegex": "/test/[^_]*.js",
    "testEnvironment": "node",
    "setupFilesAfterEnv": [
      "./test/_test-matchers.js"
    ]
  },
  "keywords": [
    "notification center",
    "mac os x 10.8",
    "notify",
    "terminal-notifier",
    "notify-send",
    "growl",
    "windows 8 notification",
    "toaster",
    "notification"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.{js,json,css,md}": [
      "prettier --write",
      "git add"
    ]
  },
  "main": "index.js",
  "maintainers": [
    {
      "name": "mikaelb",
      "email": "mikaelbre@gmail.com"
    }
  ],
  "name": "node-notifier",
  "optionalDependencies": {},
  "readme": "# node-notifier [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url]\n\nSend cross platform native notifications using Node.js. Notification Center for macOS,\n`notify-osd`/`libnotify-bin` for Linux, Toasters for Windows 8/10, or taskbar balloons for\nearlier Windows versions. Growl is used if none of these requirements are met.\n[Works well with Electron](#within-electron-packaging).\n\n![macOS Screenshot](https://raw.githubusercontent.com/mikaelbr/node-notifier/master/example/mac.png)\n![Native Windows Screenshot](https://raw.githubusercontent.com/mikaelbr/node-notifier/master/example/windows.png)\n\n## Input Example macOS Notification Center\n\n![Input Example](https://raw.githubusercontent.com/mikaelbr/node-notifier/master/example/input-example.gif)\n\n## Quick Usage\n\nShow a native notification on macOS, Windows, Linux:\n\n```javascript\nconst notifier = require('node-notifier');\n// String\nnotifier.notify('Message');\n\n// Object\nnotifier.notify({\n  title: 'My notification',\n  message: 'Hello, there!'\n});\n```\n\n## Requirements\n\n- **macOS**: >= 10.8 for native notifications, or Growl if earlier.\n- **Linux**: `notify-osd` or `libnotify-bin` installed (Ubuntu should have this by default)\n- **Windows**: >= 8, or task bar balloons for Windows < 8. Growl as fallback. Growl takes precedence over Windows balloons.\n- **General Fallback**: Growl\n\nSee [documentation and flow chart for reporter choice](./DECISION_FLOW.md).\n\n## Install\n\n```shell\nnpm install --save node-notifier\n```\n\n## <abbr title=\"Command Line Interface\">CLI</abbr>\n\n<abbr title=\"Command Line Interface\">CLI</abbr> has moved to separate project:\n<https://github.com/mikaelbr/node-notifier-cli>\n\n## Cross-Platform Advanced Usage\n\nStandard usage, with cross-platform fallbacks as defined in the\n[reporter flow chart](./DECISION_FLOW.md). All of the options\nbelow will work in some way or another on all platforms.\n\n```javascript\nconst notifier = require('node-notifier');\nconst path = require('path');\n\nnotifier.notify(\n  {\n    title: 'My awesome title',\n    message: 'Hello from node, Mr. User!',\n    icon: path.join(__dirname, 'coulson.jpg'), // Absolute path (doesn't work on balloons)\n    sound: true, // Only Notification Center or Windows Toasters\n    wait: true // Wait with callback, until user action is taken against notification, does not apply to Windows Toasters as they always wait\n  },\n  function(err, response) {\n    // Response is response from notification\n  }\n);\n\nnotifier.on('click', function(notifierObject, options, event) {\n  // Triggers if `wait: true` and user clicks notification\n});\n\nnotifier.on('timeout', function(notifierObject, options) {\n  // Triggers if `wait: true` and notification closes\n});\n```\n\nIf you want super fine-grained control, you can customize each reporter individually,\nallowing you to tune specific options for different systems.\n\nSee below for documentation on each reporter.\n\n**Example:**\n\n```javascript\nconst NotificationCenter = require('node-notifier/notifiers/notificationcenter');\nnew NotificationCenter(options).notify();\n\nconst NotifySend = require('node-notifier/notifiers/notifysend');\nnew NotifySend(options).notify();\n\nconst WindowsToaster = require('node-notifier/notifiers/toaster');\nnew WindowsToaster(options).notify();\n\nconst Growl = require('node-notifier/notifiers/growl');\nnew Growl(options).notify();\n\nconst WindowsBalloon = require('node-notifier/notifiers/balloon');\nnew WindowsBalloon(options).notify();\n```\n\nOr, if you are using several reporters (or you're lazy):\n\n```javascript\n// NOTE: Technically, this takes longer to require\nconst nn = require('node-notifier');\n\nnew nn.NotificationCenter(options).notify();\nnew nn.NotifySend(options).notify();\nnew nn.WindowsToaster(options).notify(options);\nnew nn.WindowsBalloon(options).notify(options);\nnew nn.Growl(options).notify(options);\n```\n\n## Contents\n\n- [Notification Center documentation](#usage-notificationcenter)\n- [Windows Toaster documentation](#usage-windowstoaster)\n- [Windows Balloon documentation](#usage-windowsballoon)\n- [Growl documentation](#usage-growl)\n- [Notify-send documentation](#usage-notifysend)\n\n### Usage: `NotificationCenter`\n\nSame usage and parameter setup as [**`terminal-notifier`**](https://github.com/julienXX/terminal-notifier).\n\nNative Notification Center requires macOS version 10.8 or higher. If you have\nan earlier version, Growl will be the fallback. If Growl isn't installed, an\nerror will be returned in the callback.\n\n#### Example\n\nBecause `node-notifier` wraps around [**`terminal-notifier`**](https://github.com/julienXX/terminal-notifier),\nyou can do anything `terminal-notifier` can, just by passing properties to the `notify`\nmethod.\n\nFor example:\n\n- if `terminal-notifier` says `-message`, you can do `{message: 'Foo'}`\n- if `terminal-notifier` says `-list ALL`, you can do `{list: 'ALL'}`.\n\nNotification is the primary focus of this module, so listing and activating do work,\nbut they aren't documented.\n\n### All notification options with their defaults:\n\n```javascript\nconst NotificationCenter = require('node-notifier').NotificationCenter;\n\nvar notifier = new NotificationCenter({\n  withFallback: false, // Use Growl Fallback if <= 10.8\n  customPath: undefined // Relative/Absolute path to binary if you want to use your own fork of terminal-notifier\n});\n\nnotifier.notify(\n  {\n    title: undefined,\n    subtitle: undefined,\n    message: undefined,\n    sound: false, // Case Sensitive string for location of sound file, or use one of macOS' native sounds (see below)\n    icon: 'Terminal Icon', // Absolute Path to Triggering Icon\n    contentImage: undefined, // Absolute Path to Attached Image (Content Image)\n    open: undefined, // URL to open on Click\n    wait: false, // Wait for User Action against Notification or times out. Same as timeout = 5 seconds\n\n    // New in latest version. See `example/macInput.js` for usage\n    timeout: 5, // Takes precedence over wait if both are defined.\n    closeLabel: undefined, // String. Label for cancel button\n    actions: undefined, // String | Array<String>. Action label or list of labels in case of dropdown\n    dropdownLabel: undefined, // String. Label to be used if multiple actions\n    reply: false // Boolean. If notification should take input. Value passed as third argument in callback and event emitter.\n  },\n  function(error, response, metadata) {\n    console.log(response, metadata);\n  }\n);\n```\n\n---\n\n**Note:** The `wait` option is shorthand for `timeout: 5`. This just sets a timeout\nfor 5 seconds. It does _not_ make the notification sticky!\n\nAs of Version 6.0 there is a default `timeout` set of `10` to ensure that the application closes properly. In order to remove the `timeout` and have an instantly closing notification (does not support actions), set `timeout` to `false`. If you are using `action` it is recommended to set `timeout` to a high value to ensure the user has time to respond.\n\n_Exception:_ If `reply` is defined, it's recommended to set `timeout` to a either\nhigh value, or to nothing at all.\n\n---\n\n**For macOS notifications: `icon`, `contentImage`, and all forms of `reply`/`actions` require macOS 10.9.**\n\nSound can be one of these: `Basso`, `Blow`, `Bottle`, `Frog`, `Funk`, `Glass`,\n`Hero`, `Morse`, `Ping`, `Pop`, `Purr`, `Sosumi`, `Submarine`, `Tink`.\n\nIf `sound` is simply `true`, `Bottle` is used.\n\n---\n\n**See Also:**\n\n- [Example: specific Notification Centers](./example/advanced.js)\n- [Example: input](./example/macInput.js).\n\n---\n\n**Custom Path clarification**\n\n`customPath` takes a value of a relative or absolute path to the binary of your\nfork/custom version of **`terminal-notifier`**.\n\n**Example:** `./vendor/mac.noindex/terminal-notifier.app/Contents/MacOS/terminal-notifier`\n\n**Spotlight clarification**\n\n`terminal-notifier.app` resides in a `mac.noindex` folder to prevent Spotlight from indexing the app.\n\n### Usage: `WindowsToaster`\n\n**Note:** There are some limitations for images in native Windows 8 notifications:\n\n- The image must be a PNG image\n- The image must be smaller than 1024×1024 px\n- The image must be less than 200kb\n- The image must be specified using an absolute path\n\nThese limitations are due to the Toast notification system. A good tip is to use\nsomething like `path.join` or `path.delimiter` to keep your paths cross-platform.\n\nFrom [mikaelbr/gulp-notify#90 (comment)](https://github.com/mikaelbr/gulp-notify/issues/90#issuecomment-129333034)\n\n> You can make it work by going to System > Notifications & Actions. The 'toast'\n> app needs to have Banners enabled. (You can activate banners by clicking on the\n> 'toast' app and setting the 'Show notification banners' to On)\n\n---\n\n**Windows 10 Fall Creators Update (Version 1709) Note:**\n\n[**Snoretoast**](https://github.com/KDE/snoretoast) is used to get native Windows Toasts!\n\nThe default behaviour is to have the underlying toaster applicaton as `appID`.\nThis works as expected, but shows `SnoreToast` as text in the notification.\n\nWith the Fall Creators Update, Notifications on Windows 10 will only work as\nexpected if a valid `appID` is specified. Your `appID` must be exactly the same\nvalue that was registered during the installation of your app.\n\nYou can find the ID of your App by searching the registry for the `appID` you\nspecified at installation of your app. For example: If you use the squirrel\nframework, your `appID` will be something like `com.squirrel.your.app`.\n\n```javascript\nconst WindowsToaster = require('node-notifier').WindowsToaster;\n\nvar notifier = new WindowsToaster({\n  withFallback: false, // Fallback to Growl or Balloons?\n  customPath: undefined // Relative/Absolute path if you want to use your fork of SnoreToast.exe\n});\n\nnotifier.notify(\n  {\n    title: undefined, // String. Required\n    message: undefined, // String. Required if remove is not defined\n    icon: undefined, // String. Absolute path to Icon\n    sound: false, // Bool | String (as defined by http://msdn.microsoft.com/en-us/library/windows/apps/hh761492.aspx)\n    id: undefined, // Number. ID to use for closing notification.\n    appID: undefined, // String. App.ID and app Name. Defaults to no value, causing SnoreToast text to be visible.\n    remove: undefined, // Number. Refer to previously created notification to close.\n    install: undefined // String (path, application, app id).  Creates a shortcut <path> in the start menu which point to the executable <application>, appID used for the notifications.\n  },\n  function(error, response) {\n    console.log(response);\n  }\n);\n```\n\n### Usage: `Growl`\n\n```javascript\nconst Growl = require('node-notifier').Growl;\n\nvar notifier = new Growl({\n  name: 'Growl Name Used', // Defaults as 'Node'\n  host: 'localhost',\n  port: 23053\n});\n\nnotifier.notify({\n  title: 'Foo',\n  message: 'Hello World',\n  icon: fs.readFileSync(__dirname + '/coulson.jpg'),\n  wait: false, // Wait for User Action against Notification\n\n  // and other growl options like sticky etc.\n  sticky: false,\n  label: undefined,\n  priority: undefined\n});\n```\n\nSee more information about using [growly](https://github.com/theabraham/growly/).\n\n### Usage: `WindowsBalloon`\n\nFor earlier versions of Windows, taskbar balloons are used (unless\nfallback is activated and Growl is running). The balloons notifier uses a great\nproject called [**`notifu`**](http://www.paralint.com/projects/notifu/).\n\n```javascript\nconst WindowsBalloon = require('node-notifier').WindowsBalloon;\n\nvar notifier = new WindowsBalloon({\n  withFallback: false, // Try Windows Toast and Growl first?\n  customPath: undefined // Relative/Absolute path if you want to use your fork of notifu\n});\n\nnotifier.notify(\n  {\n    title: undefined,\n    message: undefined,\n    sound: false, // true | false.\n    time: 5000, // How long to show balloon in ms\n    wait: false, // Wait for User Action against Notification\n    type: 'info' // The notification type : info | warn | error\n  },\n  function(error, response) {\n    console.log(response);\n  }\n);\n```\n\nSee full usage on the [project homepage: **`notifu`**](http://www.paralint.com/projects/notifu/).\n\n### Usage: `NotifySend`\n\n**Note:** `notify-send` doesn't support the `wait` flag.\n\n```javascript\nconst NotifySend = require('node-notifier').NotifySend;\n\nvar notifier = new NotifySend();\n\nnotifier.notify({\n  title: 'Foo',\n  message: 'Hello World',\n  icon: __dirname + '/coulson.jpg',\n\n  // .. and other notify-send flags:\n  urgency: undefined,\n  time: undefined,\n  category: undefined,\n  hint: undefined\n});\n```\n\nSee flags and options on the man page [`notify-send(1)`](http://manpages.ubuntu.com/manpages/gutsy/man1/notify-send.1.html)\n\n## Thanks to OSS\n\n`node-notifier` is made possible through Open Source Software.\nA very special thanks to all the modules `node-notifier` uses.\n\n- [`terminal-notifier`](https://github.com/julienXX/terminal-notifier)\n- [`Snoretoast`](https://github.com/KDE/snoretoast)\n- [`notifu`](http://www.paralint.com/projects/notifu/)\n- [`growly`](https://github.com/theabraham/growly/)\n\n[![NPM downloads][npm-downloads]][npm-url]\n\n## Common Issues\n\n### Windows: `SnoreToast` text\n\nSee note on \"Windows 10 Fall Creators Update\" in Windows section.\n_**Short answer:** update your `appId`._\n\n### Use inside tmux session\n\nWhen using `node-notifier` within a tmux session, it can cause a hang in the system.\nThis can be solved by following the steps described in [this comment](https://github.com/julienXX/terminal-notifier/issues/115#issuecomment-104214742)\n\nThere’s even more info [here](https://github.com/mikaelbr/node-notifier/issues/61#issuecomment-163560801)\n<https://github.com/mikaelbr/node-notifier/issues/61#issuecomment-163560801>.\n\n### macOS: Custom icon without Terminal icon\n\nEven if you define an icon in the configuration object for `node-notifier`, you will\nsee a small Terminal icon in the notification (see the example at the top of this\ndocument).\n\nThis is the way notifications on macOS work. They always show the icon of the\nparent application initiating the notification. For `node-notifier`, `terminal-notifier`\nis the initiator, and it has the Terminal icon defined as its icon.\n\nTo define your custom icon, you need to fork `terminal-notifier` and build your\ncustom version with your icon.\n\nSee [Issue #71 for more info](https://github.com/mikaelbr/node-notifier/issues/71)\n<https://github.com/mikaelbr/node-notifier/issues/71>.\n\n### Within Electron Packaging\n\nIf packaging your Electron app as an `asar`, you will find `node-notifier` will fail to load.\n\nDue to the way asar works, you cannot execute a binary from within an `asar`.\nAs a simple solution, when packaging the app into an asar please make sure you\n`--unpack` the `vendor/` folder of `node-notifier`, so the module still has access to\nthe notification binaries.\n\nYou can do so with the following command:\n\n```bash\nasar pack . app.asar --unpack \"./node_modules/node-notifier/vendor/**\"\n```\n\n### Using with pkg\n\nFor issues using with the pkg module. Check this issue out: https://github.com/mikaelbr/node-notifier/issues/220#issuecomment-425963752\n\n### Using Webpack\n\nWhen using `node-notifier` inside of `webpack`, you must add the snippet below to your `webpack.config.js`.\n\nThis is necessary because `node-notifier` loads the notifiers from a binary, so it\nneeds a relative file path. When webpack compiles the modules, it supresses file\ndirectories, causing `node-notifier` to error on certain platforms.\n\nTo fix this, you can configure webpack to keep the relative file directories.\nDo so by append the following code to your `webpack.config.js`:\n\n```javascript\nnode: {\n  __filename: true,\n  __dirname: true\n}\n```\n\n## License\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)\n\n[npm-url]: https://npmjs.org/package/node-notifier\n[npm-image]: http://img.shields.io/npm/v/node-notifier.svg?style=flat\n[npm-downloads]: http://img.shields.io/npm/dm/node-notifier.svg?style=flat\n[travis-url]: http://travis-ci.org/mikaelbr/node-notifier\n[travis-image]: http://img.shields.io/travis/mikaelbr/node-notifier.svg?style=flat\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/mikaelbr/node-notifier.git"
  },
  "scripts": {
    "example": "node ./example/message.js",
    "example:mac": "node ./example/advanced.js",
    "example:mac:input": "node ./example/macInput.js",
    "example:windows": "node ./example/toaster.js",
    "lint": "eslint example/*.js lib/*.js notifiers/*.js test/**/*.js index.js",
    "pretest": "npm run lint",
    "test": "jest"
  },
  "version": "6.0.0"
}
