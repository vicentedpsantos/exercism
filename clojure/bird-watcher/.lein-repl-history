(pop '[0 2 5 3 7 8 4])
(drop '[0 2 5 3 7 8 4])
(last '[0 2 5 3 7 8 4])
(pop '[0 2])
(conj (pop '[0 2]) 3)
(defn inc-bird [birds]
  (let [incremented (+ (last birds) 1)]
    (conj (pop birds) incremented))
  )
inc-bird '[0 2 3 4 5]
(inc-bird '[0 2 3 4 5])
(inc-bird '[0 2 3 4 22])
(defn day-without-birds? [birds]
  (contains? birds 0)
  )
(day-without-birds? [0 2 3]
)
(day-without-birds? [0 2 3])
(day-without-birds? [1 2 3])
(day-without-birds? [1 2 2])
(contains? '[1 2 3] 0)
(contains? '[1 2 3] 2)
(contains? '[1 2 3] 33)
(contains? '[1 2 3] 0)
(some #{0} '[1 2 3])
(some #{1} '[1 2 3])
(some #{2} '[1 2 3])
(some #{3} '[1 2 3])
(some #{4} '[1 2 3])
(some #{1} '[1 2 3])
(some #{0} '[1 2 3])
(some #{0} '[1 2 0 3])
(= (some #{0} '[1 2 0 3] 0)
)
(= (some #{0} '[1 2 0 3] 0))
(= (some #{0} '[1 2 0 3a]) 0)
(= (some #{0} '[1 2 0 3]) 0)
(= (some #{0} '[1 2 3]) 0)
(defn day-without-birds? [birds]
  (= (some #{0} birds) 0)
  )
(day-without-birds? '[0 1 2 3]
)
(day-without-birds? '[0 1 2 3])
(day-without-birds? '[1 2 3])
(subvec '[1 2 3 4] 0 2)
(sum (subvec '[1 2 3 4] 0 2))
(subvec '[1 2 3 4] 0 2)
(reduce (subvec '[1 2 3 4] 0 2) +)
(reduce + (subvec '[1 2 3 4] 0 2))
(defn n-days-count [birds n]
  (let [first-day 0]
    (reduce + (subvec birds 0 n))))
(n-days-count '[0 2 3 4 1 2 3 4 2] 2)
(n-days-count '[0 2 3 4 1 2 3 4 2] 3)
(n-days-count '[0 2 3 4 1 2 3 4 2] 4)
(filter (fn [x] (>= x 5)) '0 1 2 3 4 5 6 7])
(filter (fn [x] (>= x 5)) '[0 1 2 3 4 5 6 7])
(count (filter (fn [x] (>= x 5)) '[0 1 2 3 4 5 6 7]))
(defn busy-days [birds]
  (count
    (filter
      (fn [x] (>= x 5) birds)))
  )
(busy-days '0 2 5 1 6 2 7 87 2 2 3 4 299])
(busy-days '[0 2 5 1 6 2 7 87 2 2 3 4 299])
(busy-days '[0 2 5 1 6 2 7 87  2 3 4 29])
(def birds '[0 5 9 2 1])
(filter #(>= $1 5) birds)
(filter #(>= %1 5) birds)
(count (filter #(>= %1 5) birds))
(defn busy-days [birds]
  (count (filter #(>= %1 5) birds)))
(busy-days '[0 5 7 2 2])
