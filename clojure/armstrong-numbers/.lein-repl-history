(ns armstrong-numbers
  (:require [clojure.string :as str]))
(defn pow [x y]
  (Math/pow x y))
(defn number-digits [num]
  (map read-string (str/split (str num) #"")))
(defn sum-powered-to [nums exponent]
  (reduce + (map #(pow %1 exponent) nums)))
(defn armstrong? [num]
  (let [number-digits (number-digits num)
        power-to (count number-digits)
        result (sum-powered-to number-digits power-to)]
    (cond
      (= num result) true
      :else false)))
(pow 2 2)
(number-digits 12332)
(sum-powered-to '(1 1 1) 1)
(sum-powered-to '(1 1 1) 2)
(sum-powered-to '(1 1 1) 3)
(sum-powered-to '(2 2 2) 2)
(sum-powered-to '(1 5 3) 3)
(int (sum-powered-to '(1 5 3) 3))
(= 1 1)
(= 1 1.0
)
(= 1 1.0)
(clojure.lang.BigInt 1.0)
(BigInt 1.0)
(bigint 1.0)
(= 21897142587612075 21897142587612075)
(= 21897142587612075 21897142587612075.0)
(= (bigint 21897142587612075) 21897142587612075)
(ns armstrong-numbers
  (:require [clojure.string :as str]))
(defn pow [x y]
  (Math/pow x y))
(defn number-digits [num]
  (map read-string (str/split (str num) #"")))
(defn sum-powered-to [nums exponent]
  (bigint (reduce + (map #(pow %1 exponent) nums))))
(defn armstrong? [num]
  (let [number-digits (number-digits num)
        power-to (count number-digits)
        result (sum-powered-to number-digits power-to)]
    (println result)
    (println (bigint num))
    (cond
      (= (bigint num) result) true
      :else false)))
(number-digits 21897142587612075)
(sum-powered-to '(2 1 8 9 7 1 4 2 5 8 7 6 1 2 0 7 5) 17)
(read-string "21897142587612075")
(defn sum-powered-to [nums exponent]
  (bigint (reduce + (map #(pow %1 exponent) nums))))
(sum-powered-to '(2 1 8 9 7 1 4 2 5 8 7 6 1 2 0 7 5) 17)
